spring:
  application:
    name: IDENTITY-SERVICE

  config:
    import: optional:configserver:http://config-server:8888
    name: identity-service

  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: ${DATABASE_USERNAME:root}
    password: ${DATABASE_PASSWORD:123456}
    url: jdbc:mysql://${DATABASE_HOST:root}:${DATABASE_PORT:3306}/identity_service

  jpa:
    hibernate:
      ddl-auto: ${HIBERNATE_DDL_AUTO:update}
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: 441587123979-qds882ebt12bna4t4pldj9ausd2udpu2.apps.googleusercontent.com
            client-secret: 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
            scope: openid,profile,email
            redirect-uri: http://localhost:4200/oauth2/callback/google
          github:
            client-id: Ov23liYKvBAfzCvqcWfE
            client-secret: 4f3ab5c44757ab662c66ab305c505031448e974b
            scope: user,user:email
            redirect-uri: http://localhost:4200/oauth2/callback/github
        provider:
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/v2/auth
            token-uri: https://www.googleapis.com/oauth2/v4/token
            user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo
            user-name-attribute: sub
            jwk-set-uri: https://www.googleapis.com/oauth2/v3/certs

          github:
            authorization-uri: https://github.com/login/oauth/authorize
            token-uri: https://github.com/login/oauth/access_token
            user-info-uri: https://api.github.com/user

  data:
    redis:
      port: 6379
      host: ${SPRING_DATA_REDIS_HOST:redis}

  kafka:
    bootstrap-servers: ${SPRING_KAFKA_BOOTSTRAP_SERVERS:kafka:9092}

logging:
  level:
    org.springframework.cloud.config: DEBUG
    com.netflix.discovery: DEBUG

jwt:
  secret-key: ${JWT_SECRET_KEY}

sub-domain: ${SUB_DOMAIN}

google:
  client-id: 441587123979-qds882ebt12bna4t4pldj9ausd2udpu2.apps.googleusercontent.com
  secret-key: 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
  redirect-uri: http://localhost:4200/oauth2/callback/google

api-gateway:
  url: http://api-gateway:9191

eureka:
  client:
    serviceUrl:
      defaultZone: http://registry-service:8761/eureka/

resilience4j:
  circuitbreaker:
    instances:
      identityService:
        failureRateThreshold: 50  # Nếu tỷ lệ lỗi > 50%, Circuit Breaker sẽ mở
        slowCallRateThreshold: 50 # Nếu tỷ lệ gọi chậm > 50%, Circuit Breaker sẽ mở
        slowCallDurationThreshold: 4000ms # Nếu thời gian gọi > 2 giây, được xem là chậm
        permittedNumberOfCallsInHalfOpenState: 3 # Số request thử lại khi Circuit Breaker đang ở trạng thái HALF-OPEN
        slidingWindowSize: 10  # Số request được xem xét mở hay đóng Circuit Breaker, ở đây là 10 request gần nhất
        waitDurationInOpenState: 5000ms # Thời gian Circuit Breaker sẽ mở trước khi thử lại (5 giây)
  retry:
    instances:
      IDENTITY-SERVICE:
        maxAttempts: 3 # Nếu request gặp lỗi, hệ thống sẽ thử lại tối đa 3 lần trước khi từ bỏ và kích hoạt phương thức fallback.
        waitDuration: 1000ms  # Mỗi lần thử lại, hệ thống sẽ chờ 1 giây trước khi thử tiếp.
  ratelimiter:
    instances:
      identityService:
        limitForPeriod: 1000 #  1000 request là giới hạn tối đa mà service identityService có thể xử lý trong 1 giây.
        limitRefreshPeriod: 1s  # Sau mỗi giây, hệ thống sẽ cho phép thêm 10 request.
        timeoutDuration: 500ms  # Nếu vượt quá giới hạn, đợi tối đa 500ms trước khi từ chối request

---

spring:
  boot:
    message: Hello, Identity Service, Spring Cloud Bus