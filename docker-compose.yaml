services:
  mysql:
    image: mysql:latest
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: 123456
    ports:
      - "3307:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./initdb.sql:/docker-entrypoint-initdb.d/initdb.sql
    networks:
      - app_network

  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123456
      POSTGRES_DB: sonarqube
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app_network

  kafka:
    image: 'bitnami/kafka:3.7.0'
    container_name: kafka
    hostname: kafka
    ports:
      - '9092:9092'
      - '9094:9094'
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,PLAINTEXT_EXTERNAL://:9094,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,PLAINTEXT_EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_EXTERNAL:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - ALLOW_PLAINTEXT_LISTENER=yes
    volumes:
      - kafka-data:/tmp/kraft-combined-logs
    networks:
      - app_network

  neo4j:
    image: neo4j:5
    container_name: neo4j
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      - NEO4J_AUTH=neo4j/password
    networks:
      - app_network

  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - app_network

  mongodb:
    image: bitnami/mongodb:8.0.5
    container_name: mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGODB_ROOT_USER=root
      - MONGODB_ROOT_PASSWORD=123456
    networks:
      - app_network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.16.4
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - ELASTICSEARCH_PASSWORD=changeme
      - ELASTICSEARCH_USERNAME=elastic
      - xpack.security.enabled=false
      - xpack.security.transport.ssl.enabled=false
      - xpack.security.http.ssl.enabled=false
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - app_network

  # Kibana (Elasticsearch Dashboard)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.16.4
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - xpack.security.enabled=false
      - xpack.security.transport.ssl.enabled=false
    ports:
      - "5601:5601"
    networks:
      - app_network

  logstash:
    image: logstash:8.16.4
    container_name: logstash
    ports:
      - "5600:5600" # Socket port
      - "5044:5044"
    volumes:
      - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    environment:
      - XPACK_MONITORING_ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - XPACK_MONITORING_ENABLED=true
    networks:
      - app_network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    environment:
      - PROMETHEUS_HOST=prometheus
      - API_GATEWAY_HOST=api-gateway
      - BATCH_SERVICE_HOST=batch-service
      - BOOK_SERVICE_HOST=book-service
      - CART_SERVICE_HOST=cart-service
      - CHAT_SERVICE_HOST=chat-service
      - CONFIG_SERVER_HOST=config-server
      - EVENTBUS_SERVICE_HOST=eventbus-service
      - FILE_SERVICE_HOST=file-service
      - IDENTITY_SERVICE_HOST=identity-service
      - INVENTORY_SERVICE_HOST=inventory-service
      - NOTIFICATION_SERVICE_HOST=notification-service
      - ORDER_SERVICE_HOST=order-service
      - PAYMENT_SERVICE_HOST=payment-service
      - POST_SERVICE_HOST=post-service
      - PROFILE_SERVICE_HOST=profile-service
      - REGISTRY_SERVICE_HOST=registry-service
      - REVIEW_SERVICE_HOST=review-service
      - SEARCH_SERVICE_HOST=search-service
    ports:
      - '9090:9090'
    volumes:
      - ./prometheus.yaml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - app_network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: 'admin'
      GF_SECURITY_ADMIN_PASSWORD: 'admin'
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - app_network
    depends_on:
      - prometheus

  zipkin:
    image: openzipkin/zipkin:latest
    container_name: zipkin
    ports:
      - "9411:9411"
    environment:
      - STORAGE_TYPE=elasticsearch
      - ES_HOSTS=http://elasticsearch:9200
      - ES_INDEX=zipkin-index
      - JAVA_OPTS=-Xms512m -Xmx512m
    networks:
      - app_network

  jenkins:
    image: jenkins/jenkins:jdk21
    container_name: jenkins
    user: root
    privileged: true
    ports:
      - "7080:8080"
      - "50000:50000"
    volumes:
      - jenkins_data:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - app_network

  sonarqube:
    image: sonarqube:lts-community
    container_name: sonarqube
    ports:
      - "9000:9000"
    environment:
      - SONAR_JDBC_URL=jdbc:postgresql://postgres:5432/sonarqube
      - SONAR_JDBC_USERNAME=postgres
      - SONAR_JDBC_PASSWORD=123456
      - SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true
      - SONARQUBE_JAVAADDITIONALOPTS=-Xms512m -Xmx2g
    depends_on:
      - postgres
    volumes:
      - sonar_data:/opt/sonarqube/data
      - sonar_extensions:/opt/sonarqube/extensions
      - sonar_logs:/opt/sonarqube/logs
    networks:
      - app_network

  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9002:9000" # API
      - "9003:9001"  # Web
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=12345678
    volumes:
#      - minio-data:/data # production
       - C:/upload:/data # local
    command: server /data --console-address ":9001" --address ":9000"
    networks:
      - app_network

  registry-service:
    image: khanhduc/registry-service:1.0.0
    container_name: registry-service
    ports:
      - "8761:8761"
    networks:
      - app_network

  config-server:
    image: khanhduc/config-server:1.0.0
    container_name: config-server
    ports:
      - "8888:8888"
    depends_on:
      - registry-service
    networks:
      - app_network

  identity-service:
    image: khanhduc/identity-service:1.0.0
    container_name: identity-service
    ports:
      - "8080:8080"
    depends_on:
      - mysql
      - redis
      - kafka
      - config-server
      - registry-service
#      - elasticsearch
#      - logstash
    environment:
      - DATABASE_USERNAME=root
      - DATABASE_PASSWORD=123456
      - DATABASE_HOST=mysql
      - DATABASE_PORT=3306
      - HIBERNATE_DDL_AUTO=update
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SUB_DOMAIN=identity-service
      - LOGSTASH_HOST=logstash:5600
      - JWT_SECRET_KEY=LlXbOuam4UBLZOg9uylp4Bp4IzL0p9Vb/leiOexBiXBZnHGkzH/lVxamrIjm/pv6rDDsqLmFhlfTC2rGzLf603+SkhUFr4OTh/rAcCPfx1Y=
    networks:
      - app_network

  profile-service:
    image: profile-service:1.0.0
    container_name: khanhduc/profile-service
    ports:
      - "8081:8081"
    environment:
      - LOGSTASH_HOST=logstash:5600
    depends_on:
      - kafka
      - config-server
      - registry-service
    networks:
      - app_network

  file-service:
    image: khanhduc/file-service:1.0.0
    container_name: file-service
    ports:
      - "8090:8090"
    depends_on:
      - mongodb
      - config-server
    environment:
      - MINIO_DOMAIN=http://34.135.113.58:9000
    networks:
      - app_network

  notification-service:
    image: khanhduc/notification-service:1.0.0
    container_name: notification-service
    ports:
      - "8882:8882"
    depends_on:
      - kafka
      - config-server
      - registry-service
    networks:
      - app_network

  course-service:
    image: khanhduc/course-service:1.0.0
    container_name: course-service
    ports:
      - "8899:8899"
    depends_on:
      - kafka
      - elasticsearch
      - registry-service
      - config-server
    networks:
      - app_network


  search-service:
    image: khanhduc/search-service:1.0.0
    container_name: search-service
    ports:
      - "8087:8087"
    depends_on:
      - elasticsearch
      - registry-service
      - config-server
    networks:
      - app_network

  api-gateway:
    image: khanhduc/api-gateway:1.0.0
    container_name: api-gateway
    ports:
      - "9191:9191"
    depends_on:
      - registry-service
      - config-server
    environment:
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://registry-service:8761/eureka/
      - IDENTITY_SERVICE_BASE_URL=http://identity-service:8080/identity
      - ZIPKIN_TRACING_ENDPOINT=http://zipkin:9411/api/v2/spans
    networks:
      - app_network

  chat-service:
    image: khanhduc/chat-service:1.0.0
    container_name: chat-service
    ports:
      - "8091:8091"
    depends_on:
      - mysql
    networks:
      - app_network

  event-bus-service:
    image: khanhduc/event-bus-service:1.0.0
    container_name: event-bus-service
    ports:
      - "9999:9999"
    networks:
      - app_network

networks:
  app_network:
    driver: bridge

volumes:
  mysql_data:
    driver: local
  postgres_data:
    driver: local
  kafka-data:
    driver: local
  elasticsearch-data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  jenkins_data:
    driver: local
  sonar_data:
    driver: local
  sonar_extensions:
    driver: local
  sonar_logs:
    driver: local
  minio-data:
    driver: local